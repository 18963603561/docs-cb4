<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="java-tracing-howto">
  <title>Tracing from the Java SDK with Couchbase Server</title>
  <titlealts><navtitle>Tracing from the SDK</navtitle></titlealts>
  <shortdesc>Use tracing from the SDK to discover timeouts and bottlenecks across the netowrk and cluster.</shortdesc>
  <body>
    <p>For our example, we will customize the threshold logging tracer settings with <apiname>CouchbaseEnvironment.Builder</apiname>.  By default it 
      will log every minute (if something is found) and only sample the top 10 slowest operations. The default threshold for key/value operation is 500 milliseconds. We shall
      set them so low that almost everything gets logged - not something you should do in production!<codeblock outputclass="language-java">Tracer tracer = ThresholdLogTracer.create(ThresholdLogReporter.builder()
  .kvThreshold(1) // 1 micros
  .logInterval(1, TimeUnit.SECONDS) // log every second
  .sampleSize(Integer.MAX_VALUE)
  .pretty(true) // pretty print the json output in the logs
  .build());</codeblock>This will set our threshold for key/value operations to one microsecond, log the found operations every second, and set the sample size to a very large value so everything will be logged.</p>

    <p>With these configs in place we are ready to run some operations. Below, we read some documentss from the travel-sample bucket and, if found, write them back with an <codeph>upsert</codeph> - giving us both read and write operations to log.<codeblock outputclass="language-java">// Connect
CouchbaseEnvironment env = DefaultCouchbaseEnvironment.builder()
    .tracer(tracer)
    .build();
Cluster cluster = CouchbaseCluster.create(env, "127.0.0.1");
 
Bucket bucket = cluster.openBucket("travel-sample");
 
// Load a couple of docs and write them back
for(int i = 0; i &lt; 5; i++) {
  JsonDocument doc = bucket.get("airline_1" + i);
  if (doc != null) {
    bucket.upsert(doc);
  }
}
 
Thread.sleep(TimeUnit.MINUTES.toMillis(1));</codeblock></p>

    <p>Run the code, and you will see something like the following in the logs:<codeblock outputclass="language-json">Apr 04, 2018 9:42:57 AM com.couchbase.client.core.tracing.ThresholdLogReporter logOverThreshold
WARNING: Operations over threshold: [ {
  "top" : [ {
    "server_us" : 8,
    "local_id" : "41837B87B9B1C5D1/000000004746B9AA",
    "local_address" : "127.0.0.1:55011",
    "operation_id" : "get:0x6",
    "dispatch_us" : 315,
    "remote_address" : "127.0.0.1:11210",
    "total_us" : 576
  }, {
    "server_us" : 8,
    "local_id" : "41837B87B9B1C5D1/000000004746B9AA",
    "local_address" : "127.0.0.1:55011",
    "operation_id" : "get:0x5",
    "dispatch_us" : 319,
    "remote_address" : "127.0.0.1:11210",
    "total_us" : 599
  }, {
    "server_us" : 8,
    "local_id" : "41837B87B9B1C5D1/000000004746B9AA",
    "local_address" : "127.0.0.1:55011",
    "operation_id" : "get:0x4",
    "dispatch_us" : 332,
    "remote_address" : "127.0.0.1:11210",
    "total_us" : 632
  }, {
    "server_us" : 11,
    "local_id" : "41837B87B9B1C5D1/000000004746B9AA",
    "local_address" : "127.0.0.1:55011",
    "operation_id" : "get:0x3",
    "dispatch_us" : 392,
    "remote_address" : "127.0.0.1:11210",
    "total_us" : 762
  }, {
    "server_us" : 23,
    "local_id" : "41837B87B9B1C5D1/000000004746B9AA",
    "local_address" : "127.0.0.1:55011",
    "operation_id" : "get:0x1",
    "decode_us" : 9579,
    "dispatch_us" : 947,
    "remote_address" : "127.0.0.1:11210",
    "total_us" : 16533
  }, {
    "server_us" : 56,
    "encode_us" : 12296,
    "local_id" : "41837B87B9B1C5D1/000000004746B9AA",
    "local_address" : "127.0.0.1:55011",
    "operation_id" : "upsert:0x2",
    "dispatch_us" : 1280,
    "remote_address" : "127.0.0.1:11210",
    "total_us" : 20935
  } ],
  "service" : "kv",
  "count" : 6
} ]</codeblock>For each service (only kv-based on this workload), the threshold log reporter will show you the total number of recorded ops (through count), and give you the top slowest ops sorted by their latency. Since only airline_10 exists in the bucket you will see five document fetches but only one mutation.</p>


        <section id="threshold_log_reporter_output_fields">
            <title>
                Output fields in detail.
            </title>
    <p>Let's highlight a single operation, and explain each field in a little more detail:<codeblock outputclass="language-json">{
	"server_us" : 23,
	"local_id" : "41837B87B9B1C5D1/000000004746B9AA",
	"local_address" : "127.0.0.1:55011",
	"operation_id" : "get:0x1",
	"decode_us" : 1203,
	"dispatch_us" : 947,
	"remote_address" : "127.0.0.1:11210",
	"total_us" : 1525
}</codeblock></p>
    <p>This tells us the following:<ul>
      <li><b>total_us:</b> The total time it took to perform the full operation: here around 1.5 milliseconds</li>
      <li><b>server_us:</b> The server reported that its work performed took 23 microseconds (this does not include network time or time in the buffer before picked up at the cluster)</li>
      <li><b>decode_us:</b> Decoding the response took the client 1.2 milliseconds</li>
      <li><b>dispatch_us:</b> The time when the client sent the request and got the response took around 1 millisecond.</li>
      <li><b>local_address:</b> The local socket used for this operation.</li>
      <li><b>remote_address:</b> The remote socket on the server used for this operation. Useful to figure out which node is affected.</li>
      <li><b>operation_id:</b> A combination of type of operation and id (in this case the opaque value), useful for diagnosing and troubleshooting in combination with the local_id.</li>
      <li><b>local_id:</b> With Server 5.5 and later, this id is negotiated with the server and can be used to correlate logging information on both sides in a simpler fashion.</li></ul></p>
    <note type="note">The exact format of this log is still a bit in flux and will change between dp1 and beta / GA releases.</note>
    <p>You can see that if the thresholds are set the right way based on production requirements, without much effort slow operations can be logged and pinpointed more easily than before.</p>
        </section>


        <section id="timeout_visibility">
            <title>
                Timeout Visibility.
            </title>
    <p>Previously, when an operation takes longer than the timeout specified allows, a <codeph>TimeoutException</codeph> is thrown. It usually looks like this:.<codeblock outputclass="language-java">Exception in thread "main" java.lang.RuntimeException: java.util.concurrent.TimeoutException
	at com.couchbase.client.java.util.Blocking.blockForSingle(Blocking.java:77)
	at com.couchbase.client.java.CouchbaseBucket.get(CouchbaseBucket.java:131)
	at Main.main(Main.java:34)
Caused by: java.util.concurrent.TimeoutException
	... 3 more</codeblock></p>

    <p>The new client does much more, transparently adding even more information:.<codeblock outputclass="language-java">Exception in thread "main" java.lang.RuntimeException: java.util.concurrent.TimeoutException: localId: 2C12AAA6637FB4FF/00000000147B092F, opId: 0x1, local: 127.0.0.1:60389, remote: 127.0.0.1:11210, timeout: 1000us
	at rx.exceptions.Exceptions.propagate(Exceptions.java:57)
	at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:463)
	at rx.observables.BlockingObservable.singleOrDefault(BlockingObservable.java:372)
	at com.couchbase.client.java.CouchbaseBucket.get(CouchbaseBucket.java:131)
	at SimpleReadWrite.main(SimpleReadWrite.java:64)
Caused by: java.util.concurrent.TimeoutException: localId: 2C12AAA6637FB4FF/00000000147B092F, opId: 0x1, local: 127.0.0.1:60389, remote: 127.0.0.1:11210, timeout: 1000us
	at com.couchbase.client.java.bucket.api.Utils$1.call(Utils.java:75)
	at com.couchbase.client.java.bucket.api.Utils$1.call(Utils.java:71)
	*snip*</codeblock>Now the timeout itself provides you valuable information like the local and remote sockets, and the operation id, as well as the timeout set and the local ID used for troubleshooting. You can take this information and correlate it to the top slow operations in the threshold log.</p>

    <p>The <apiname>TimeoutException</apiname> now provides you more information into <i>what</i> went wrong and then you can go look at the log to figure out <i>why</i> it was slow.
    </p>
    </section>
  </body>
</topic>