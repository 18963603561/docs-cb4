<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="threshold-logging">
  <title>Threshold Logging Tracing through the SDK</title>
  <titlealts><navtitle>Threshold Logging</navtitle></titlealts>
    <shortdesc conref="../shared/tracing.dita#tracing/shortdesc"/>

    <body>
        <section conref="../shared/tracing.dita#tracing/why_tracing">
        </section>

        <section conref="../shared/tracing.dita#tracing/open_tracing">
        </section>
        
        <section id="threshold_configuration">
            <title>Threshold Configuration Settings</title>
            <p>The threshold tracer receives completed spans and verifies if an operation has exceeded the 
                given threshold for the operation type. Operations that exceed the threshold are periodically 
                logged with a total count and a sample of the slowest ones. The following are SDK configuration properties.</p>
            <table frame="all" rowsep="1" colsep="1" id="threshold-logging-tracer-ref">
                <title>Threshold Logging Tracer Properties</title>
                <tgroup cols="3">
                    <colspec colname="name" colnum="1" colwidth="3*"/>
                    <colspec colname="bname" colnum="2" colwidth="3*"/>
                    <colspec colname="bname" colnum="3" colwidth="1*"/>
                    <thead>
                        <row>
                            <entry>Property Name</entry>
                            <entry>Description</entry>
                            <entry>Default Value</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><codeph>OperationTracingEnabled</codeph></entry>
                            <entry>Boolean used to determine tracing is enabled. Defaults to using the 
                                <codeph>ThesholdLoggingTracer</codeph> if enabled. When false a Noop or similar tracing 
                                implementation should be used instead.</entry>
                            <entry>true</entry>
                        </row>
                        <row>
                            <entry><codeph>OperationTracingServerDurationEnabled</codeph></entry>
                            <entry>Boolean used to instruct the SDK to try and retrieve duration metrics from the server. 
                                This is done in a different way depending on the service type.
                            For KV engine: Controls if the <codeph>Framing Extras hello</codeph> flag is issued during 
                                socket setup.</entry>
                            <entry>true</entry>
                        </row>
                        <row>
                            <entry><codeph>ThresholdLoggingTracerInterval</codeph></entry>
                            <entry>The interval between executions that processes the collected operation spans. 
                                Expressed in milliseconds.
</entry>
                            <entry>60,000 (1 minute)</entry>
                        </row>
                        <row>
                            <entry><codeph>ThresholdLoggingTracerSampleSize</codeph></entry>
                            <entry>The maximum number of items to log per service.</entry>
                            <entry>10</entry>
                        </row>
                        <row>
                            <entry><codeph>ThresholdLoggingTracerKVFloor</codeph></entry>
                            <entry>The KV operation operation threshold. Expressed in microseconds.</entry>
                            <entry>500,000 (500 milliseconds)</entry>
                        </row>
                        <row>
                            <entry><codeph>ThresholdLoggingTracerViewsFloor</codeph></entry>
                            <entry>The View query operation threshold. Expressed in microseconds.</entry>
                            <entry>1,000,000 (1 second)</entry>
                        </row>
                        <row>
                            <entry><codeph>ThresholdLoggingTracerQueryFloor</codeph></entry>
                            <entry>The N1QL query operation threshold. Expressed in microseconds.</entry>
                            <entry>1,000,000 (1 second)</entry>
                        </row>
                        <row>
                            <entry><codeph>ThresholdLoggingTracerSearchFloor</codeph></entry>
                            <entry>The FTS query operation threshold. Expressed in microseconds.</entry>
                            <entry>1,000,000 (1 second)</entry>
                        </row>
                        <row>
                            <entry><codeph>ThresholdLoggingTracerAnalyticsFloor</codeph></entry>
                            <entry>The Analytics query operation threshold. Expressed in microseconds.</entry>
                            <entry>1,000,000 (1 second)</entry>
                        </row>
                    </tbody>
                </tgroup>
        </table>

            
        </section>
    

        <section id="tracing_python">
            <title>
                Threshold Logging in Python
            </title>

            <p>
              Threshold tracing is enabled by default. It can be disabled explicitly by adding <codeph>enable_tracing=false</codeph>
                to the connection string/open_bucket options. 
                Here is the code to override the default values of the tracer:<codeblock outputclass="language-python">options = dict(hostname="localhost",bucket="default")
bucket = Bucket("couchbase://{hostname}/{bucket}".format(**options))
bucket.tracing_threshold_queue_flush_interval = 5000 # 5 seconds
bucket.tracing_threshold_queue_size = 5
bucket.tracing_threshold_kv = 500000 # 500 ms
bucket.tracing_threshold_n1ql = 1000000 # 1 second
bucket.tracing_threshold_view = 1000000 # 1 second
bucket.tracing_threshold_fts = 1000000 # 1 second
bucket.tracing_threshold_analytics = 1000000 # 1 second</codeblock></p>

            <p>
In order to see warnings from the threshold tracer, you will need to enable logging:<codeblock outputclass="language-python">import couchbase
import logging
couchbase.enable_logging() # allows us to see warnings for slow/orphaned operations

# set logging to WARNING level so we can see warnings
ch = logging.StreamHandler()
ch.setLevel(logging.WARNING)
logging.getLogger().addHandler(ch)</codeblock></p>
            <p>
            One can also pass in an OpenTracing tracer in the Bucket options, e.g.:<codeblock outputclass="language-python">from opentracing_pyzipkin.tracer import Tracer
import requests

def http_transport(encoded_span):
    # The collector expects a thrift-encoded list of spans.
    requests.post('http://localhost:9411/api/v1/spans',
        data=encoded_span,
        headers={'Content-Type': 'application/x-thrift'})

def jaeger_tracer(service, port = 9414, **kwargs ):
    port = 9411
    tracer= Tracer("My Tracer Name", 100, http_transport, port)
    return tracer

options = dict(hostname="localhost",bucket="default")
bucket = Bucket("couchbase://{hostname}/{bucket}".format(**options), tracer = jaeger_tracer())</codeblock>This will also log spans to the provided tracer. At present the interface does not populate
                the 'parent' field in the <codeph>start_span</codeph> function, so hierarchical information is lost. This
                feature will be added in an upcoming Python SDK release.
            </p>
        </section>
    </body>
</topic>
